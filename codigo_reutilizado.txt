if __name__ == "__main__":

    cfg = config.load(sys.argv[1])
    ymlNode = cfg.getProperty('AmigoBot')
    node = rospy.init_node(ymlNode["NodeName"], anonymous=True)

    # ------------ M O T O R S ----------------------------------
    print("Publishing "+  "AmigoBot.Motors" + " with ROS messages")
    topicM = cfg.getProperty("AmigoBot.Motors"+".Topic")
    maxW = cfg.getPropertyWithDefault("AmigoBot.Motors"+".maxW", 0.2)
    if not maxW:
        maxW = 0.2
        print ("AmigoBot.Motors"+".maxW not provided, the default value is used: "+ repr(maxW))
    maxV = cfg.getPropertyWithDefault("AmigoBot.Motors"+".maxV", 0.2)
    if not maxV:
        maxV = 0.2
        print ("AmigoBot.Motors"+".maxV not provided, the default value is used: "+ repr(maxV))
    motors = PublisherMotors(topicM, maxV, maxW)
    # ----------------- P O S E     3 D -------------------------------------
    print("Receiving " + "AmigoBot.Pose3D" + " from ROS messages")
    topicP = cfg.getProperty("AmigoBot.Pose3D"+".Topic")
    pose3d = ListenerPose3d(topicP)
    # -------- L A S E R --------------------------------------------------
    print("Receiving " + "AmigoBot.Laser" + "  LaserData from ROS messages")
    topicL  = cfg.getProperty("AmigoBot.Laser"+".Topic")
    laser = ListenerLaser(topicL)
    # -------- S O N A R --------------------------------------------------
    print("Receiving " + "AmigoBot.Sonar" + " from ROS messages")
    topicB = cfg.getProperty("AmigoBot.Sonar"+".Topic")
    sonar = ListenerSonar(topicB)

    algorithm = MyAlgorithm(pose3d, motors, laser, sonar)

    app = QApplication(sys.argv)
    myGUI = MainWindow(pose3d)
    myGUI.setMotors(motors)
    myGUI.setPose3D(pose3d)
    myGUI.setLaser(laser)
    myGUI.setAlgorithm(algorithm)
    myGUI.show()


    t2 = ThreadGUI(myGUI)
    t2.daemon=True
    t2.start()

    sys.exit(app.exec_())


*******************************************************************************
	// px1 = posx + side * Math.cos(3 * Math.PI / 4 + ang - Math.PI / 2 + Math.PI / 2); //4 + 4.24 * cos(135+315) = 4
	// py1 = posy + side * Math.sin(3 * Math.PI / 4 + ang - Math.PI / 2 + Math.PI / 2); //8 + 4.24 * sin(135+315) = 12.24

	// px2 = posx + side * Math.cos(7 * Math.PI / 4 + ang - Math.PI / 2 + Math.PI / 2); //4 + 4.24 * cos(315+315) = 4
	// py2 = posy + side * Math.sin(7 * Math.PI / 4 + ang - Math.PI / 2 + Math.PI / 2); //8 + 4.24 * sin(315+315) = 3.76

	// hipotenusa = Math.hypot(side, side); //6

	// px3 = posx + hipotenusa * Math.cos(Math.PI / 2 + ang - Math.PI / 2 + Math.PI / 2); //4 + 6 * cos(90+315) = 8.24
	// py3 = posy + hipotenusa * Math.sin(Math.PI / 2 + ang - Math.PI / 2 + Math.PI / 2); //8 + 6 * sin(90+315) = 12.24

	// px4 = posx + hipotenusa * Math.cos(ang - Math.PI / 2 + Math.PI / 2); //4 + 6 * cos(315) = 8.24
	// py4 = posy + hipotenusa * Math.sin(ang - Math.PI / 2 + Math.PI / 2); //8 + 6 * sin(315) = 3.76

	// ctx.arc(posx, posy, side, ang + 3*Math.PI/4 - Math.PI / 2 + Math.PI / 2, ang + 7*Math.PI/4 - Math.PI / 2 + Math.PI / 2, false);
